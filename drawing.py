# -*- coding: utf-8 -*-
"""drawing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lyX-vcleuvCYOc83vPzElpCvz3mFi1pG
"""

!pip install -q lucid>=0.2.3

import numpy as np

import ctypes.util
from lucid.misc.gl.glcontext import create_opengl_context

# Now it's safe to import OpenGL and EGL functions
import OpenGL.GL as gl
from OpenGL.GLU import *

# create_opengl_context() creates GL context that is attached to an
# offscreen surface of specified size. Note that rendering to buffers
# of different size and format is still possible with OpenGL Framebuffers.
#
# Users are expected to directly use EGL calls in case more advanced
# context management is required.
WIDTH, HEIGHT = 600,600
create_opengl_context((WIDTH, HEIGHT))
    
# OpenGL context is available here.

print(gl.glGetString(gl.GL_VERSION))
print(gl.glGetString(gl.GL_VENDOR)) 
#print(gl.glGetString(gl.GL_EXTENSIONS))

from IPython.display import display
from PIL import Image

def DrawCirclepoints(radius,x, y, x_c, y_c):
      gl.glBegin(gl.GL_LINES)
      x_0, y_0 = y, x
      x_1, y_1 = x, y
      x_2, y_2 = -x, y
      x_3, y_3 = -y, x
      x_4, y_4 = -y, -x
      x_5, y_5 = -x, -y
      x_6, y_6 = x, -y
      x_7, y_7 = y, -x
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_4 /1000+ x_c), (y_4/1000 + y_c))
      gl.glVertex2f((x_1 /1000  + x_c),( y_1/1000 + y_c))
      gl.glVertex2f((x_5 /1000+ x_c), (y_5/1000 + y_c))
      gl.glVertex2f((x_2 /1000  + x_c),( y_2/1000 + y_c))
      gl.glVertex2f((x_6 /1000+ x_c), (y_6/1000 + y_c))
      gl.glVertex2f((x_3 /1000 + x_c),( y_3/1000 + y_c))
      gl.glVertex2f((x_7/1000 + x_c), (y_7/1000 + y_c))

      gl.glEnd()

def drawCircle(radius, x_c, y_c,string):
      d = 1 - radius
      x = 0
      y = radius
      if(string=="Full"):
        DrawCirclepoints(radius,x, y, x_c, y_c)
      while x < y:
          x+=1
          if d < 0:
              d = d + 2 * x + 3
          else:
              d = d + 2 * x - 2 * y + 5
              y -= 1
          if(string=="Full"):
            DrawCirclepoints(radius,x, y, x_c, y_c)

import random
gl.glClear(gl.GL_COLOR_BUFFER_BIT)
gl.glColor3f(0/255, 0/255, 0/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(1200+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 15/255, 40/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(1000+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 25/255, 70/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(900+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 30/255, 80/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(800+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 35/255, 90/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(700+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 40/255, 100/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(600+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 45/255, 110/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(500+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 45/255, 120/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(500+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 45/255, 115/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.2
for i in range(500+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(0/255, 45/255, 120/255)
gl.glPointSize(10) 
gl.glBegin(gl.GL_LINES)
y=-0.6
for i in range(400+1):
  gl.glVertex2f(1,y)
  gl.glVertex2f(-1,y)
  y=y+0.001
gl.glEnd()

gl.glColor3f(1,1,1)
gl.glPointSize(2) 
gl.glBegin(gl.GL_POINTS)
for i in range(0,100):
  x = random.randint(-100,100)
  for j in range(0,100):
    y = random.randint(-30, 100)
  gl.glVertex2f(x/100, y/100)
gl.glEnd()

drawCircle(625,0,0.1,"Full")

gl.glColor3f(0, 0, 0)
gl.glPointSize(1)
gl.glBegin(gl.GL_LINES)
x=-1
for i in range(200):
  gl.glVertex2f(x,-0.4)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(100):
  gl.glVertex2f(x,-0.5)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(100):
  gl.glVertex2f(x,0)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(100):
  gl.glVertex2f(x,-0.55)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(200):
  gl.glVertex2f(x,-0.35)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(50):
  gl.glVertex2f(x,-0.45)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(150):
  gl.glVertex2f(x,0.2)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(125):
  gl.glVertex2f(x,-0.25)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(50):
  gl.glVertex2f(x,-0.33)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(125):
  gl.glVertex2f(x,-0.25)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(50):
  gl.glVertex2f(x,-0.1)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(25):
  gl.glVertex2f(x,-0.3)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(50):
  gl.glVertex2f(x,-0.1)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(150):
  gl.glVertex2f(x,-0.47)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(90):
  gl.glVertex2f(x,0.1)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(110):
  gl.glVertex2f(x,-0.58)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
for i in range(500):
  gl.glVertex2f(x,-0.32)
  gl.glVertex2f(x,-0.8)
  x=x+0.001
gl.glEnd()

img_buf = gl.glReadPixelsub(0, 0, WIDTH, HEIGHT, gl.GL_RGB, gl.GL_UNSIGNED_BYTE)
img = np.frombuffer(img_buf,np.uint8).reshape(HEIGHT, WIDTH, 3)[::-1]
display(Image.fromarray(img,'RGB'))