# -*- coding: utf-8 -*-
"""MoonLight.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BVTPIgfxUpQAo2DA5PXxwKQWQvxtNwjR
"""

!pip install -q lucid>=0.2.3

import numpy as np

import ctypes.util
from lucid.misc.gl.glcontext import create_opengl_context

# Now it's safe to import OpenGL and EGL functions
import OpenGL.GL as gl
from OpenGL.GLU import *

# create_opengl_context() creates GL context that is attached to an
# offscreen surface of specified size. Note that rendering to buffers
# of different size and format is still possible with OpenGL Framebuffers.
#
# Users are expected to directly use EGL calls in case more advanced
# context management is required.
WIDTH, HEIGHT = 800,800
create_opengl_context((WIDTH, HEIGHT))
    
# OpenGL context is available here.

print(gl.glGetString(gl.GL_VERSION))
print(gl.glGetString(gl.GL_VENDOR)) 
#print(gl.glGetString(gl.GL_EXTENSIONS))

from IPython.display import display
from PIL import Image

def DrawCirclepointsHalf(radius,x, y, x_c, y_c):
      gl.glColor3f(1, 1, 1)
      gl.glBegin(gl.GL_LINES)
      x_0, y_0 = y, x
      x_1, y_1 = x, y
      x_2, y_2 = -x, y
      x_3, y_3 = -y, x
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_1 /1000  + x_c),( y_1/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_2 /1000  + x_c),( y_2/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_3 /1000 + x_c),( y_3/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))

      gl.glEnd()

def DrawCirclepoints(radius,x, y, x_c, y_c):
      gl.glBegin(gl.GL_LINES)
      x_0, y_0 = y, x
      x_1, y_1 = x, y
      x_2, y_2 = -x, y
      x_3, y_3 = -y, x
      x_4, y_4 = -y, -x
      x_5, y_5 = -x, -y
      x_6, y_6 = x, -y
      x_7, y_7 = y, -x
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_4 /1000+ x_c), (y_4/1000 + y_c))
      gl.glVertex2f((x_1 /1000  + x_c),( y_1/1000 + y_c))
      gl.glVertex2f((x_5 /1000+ x_c), (y_5/1000 + y_c))
      gl.glVertex2f((x_2 /1000  + x_c),( y_2/1000 + y_c))
      gl.glVertex2f((x_6 /1000+ x_c), (y_6/1000 + y_c))
      gl.glVertex2f((x_3 /1000 + x_c),( y_3/1000 + y_c))
      gl.glVertex2f((x_7/1000 + x_c), (y_7/1000 + y_c))

      gl.glEnd()

def drawCircle(radius, x_c, y_c,string):
      d = 1 - radius
      x = 0
      y = radius
      if(string=="Full"):
        DrawCirclepoints(radius,x, y, x_c, y_c)
      else:
        DrawCirclepointsHalf(radius,x, y, x_c, y_c)
      while x < y:
          x+=1
          if d < 0:
              d = d + 2 * x + 3
          else:
              d = d + 2 * x - 2 * y + 5
              y -= 1
          if(string=="Full"):
            DrawCirclepoints(radius,x, y, x_c, y_c)
          else:
            DrawCirclepointsHalf(radius,x, y, x_c, y_c)

import math
def day():
  def DrawCircleline(radius1 , radius2 , x1 , y1 , x2 , y2 , x_c, y_c):
      gl.glColor3f(255/255, 239/255, 0/255)
      gl.glPointSize(20)
      gl.glBegin(gl.GL_LINES)

      x_10, y_10 = y1, x1
      x_20, y_20 = y2, x2
      x_14, y_14 = -y1, -x1
      x_24, y_24 = -y2, -x2
      x_11, y_11 = x1, y1
      x_21, y_21 = x2, y2
      x_15, y_15 = -x1, -y1
      x_25, y_25 = -x2, -y2
      gl.glVertex2f((x_10 /1000) + x_c,( y_10/1000 + y_c))
      gl.glVertex2f((x_20 /1000) + x_c,( y_20/1000 + y_c))
      gl.glVertex2f((x_14 /1000) + x_c,( y_14/1000 + y_c))
      gl.glVertex2f((x_24 /1000) + x_c,( y_24/1000 + y_c))
      gl.glVertex2f((x_11 /1000) + x_c,( y_11/1000 + y_c))
      gl.glVertex2f((x_21 /1000) + x_c,( y_21/1000 + y_c))
      gl.glVertex2f((x_15 /1000) + x_c,( y_15/1000 + y_c))
      gl.glVertex2f((x_25 /1000) + x_c,( y_25/1000 + y_c))
    
      x_12, y_12 = (radius1*math.cos(40)) , (radius1*math.sin(40)) 
      x_22, y_22 = (radius2*math.cos(40)) ,(radius2*math.sin(40))
      x_16, y_16 = (radius1*math.cos(125)) ,(radius1*math.sin(125)) 
      x_26, y_26 = (radius2*math.cos(125)) ,(radius2*math.sin(125))
      x_13, y_13 = (radius1*math.cos(-40)) ,(radius1*math.sin(-40)) 
      x_23, y_23 = (radius2*math.cos(-40)) ,(radius2*math.sin(-40)) 
      x_17, y_17 = (radius1*math.cos(-125)) ,(radius1*math.sin(-125)) 
      x_27, y_27 = (radius2*math.cos(-125)) ,(radius2*math.sin(-125)) 
      gl.glVertex2f((x_12 /1000) + x_c,( y_12/1000 + y_c))
      gl.glVertex2f((x_22 /1000) + x_c,( y_22/1000 + y_c))
      gl.glVertex2f((x_16 /1000) + x_c,( y_16/1000 + y_c))
      gl.glVertex2f((x_26 /1000) + x_c,( y_26/1000 + y_c ))          
      gl.glVertex2f((x_13 /1000) + x_c,( y_13/1000 + y_c))
      gl.glVertex2f((x_23 /1000) + x_c,( y_23/1000 + y_c))
      gl.glVertex2f((x_17 /1000) + x_c,( y_17/1000 + y_c))
      gl.glVertex2f((x_27 /1000) + x_c,( y_27/1000 + y_c))


      gl.glEnd()


  def drawCircle(radius, x_c, y_c,string):
      d = 1 - radius
      x = 0
      y = radius
      if(string=="Full"):
        DrawCirclepoints(radius,x, y, x_c, y_c)
      else:
        DrawCirclepointsHalf(radius,x, y, x_c, y_c)
      while x < y:
          x+=1
          if d < 0:
              d = d + 2 * x + 3
          else:
              d = d + 2 * x - 2 * y + 5
              y -= 1
          if(string=="Full"):
            DrawCirclepoints(radius,x, y, x_c, y_c)
          else:
            DrawCirclepointsHalf(radius,x, y, x_c, y_c)



  gl.glClear(gl.GL_COLOR_BUFFER_BIT)
  gl.glColor3f(135/255, 206/255, 235/255)
  gl.glPointSize(10) 
  gl.glBegin(gl.GL_LINES)
  y=0
  for i in range(1000+1):
      gl.glVertex2f(1,y)
      gl.glVertex2f(-1,y)
      y=y+0.001
  gl.glEnd()


  gl.glPointSize(5)

  drawCircle(70,-0.65,0.75,"Half")
  drawCircle(100,-0.53,0.75,"Half")
  drawCircle(70,-0.72,0.75,"Half")
  drawCircle(70,0.35,0.45,"Half")
  drawCircle(100,0.15,0.45,"Half")
  drawCircle(70,0.25,0.45,"Half")

  gl.glColor3f(255/255, 239/255, 0/255)
  drawCircle(130,0.65,0.75,"Full")
  gl.glColor3f(255/255, 225/255, 0/255)
  gl.glPointSize(5)
  drawCircle(110,0.65,0.75,"Full")
  gl.glColor3f(255/255, 210/255, 0/255)
  gl.glPointSize(5)
  drawCircle(90,0.65,0.75,"Full")
  gl.glColor3f(255/255, 190/255, 0/255)
  gl.glPointSize(5)
  drawCircle(70,0.65,0.75,"Full")
  gl.glColor3f(255/255, 170/255, 0/255)
  gl.glPointSize(5)
  drawCircle(50,0.65,0.75,"Full")
  DrawCircleline(140,200,0,140,0,200,0.65,0.75)

import random
def night():
  def DrawCirclepointsHalf(radius,x, y, x_c, y_c):
      gl.glBegin(gl.GL_LINES)
      x_0, y_0 = y, x
      x_1, y_1 = x, y
      x_2, y_2 = -x, y
      x_3, y_3 = -y, x
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_1 /1000  + x_c),( y_1/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_2 /1000  + x_c),( y_2/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_3 /1000 + x_c),( y_3/1000 + y_c))
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))

      gl.glEnd()

  def DrawCirclepoints(radius,x, y, x_c, y_c):
      gl.glBegin(gl.GL_LINES)
      x_0, y_0 = y, x
      x_1, y_1 = x, y
      x_2, y_2 = -x, y
      x_3, y_3 = -y, x
      x_4, y_4 = -y, -x
      x_5, y_5 = -x, -y
      x_6, y_6 = x, -y
      x_7, y_7 = y, -x
      gl.glVertex2f((x_0 /1000) + x_c,( y_0/1000 + y_c))
      gl.glVertex2f((x_4 /1000+ x_c), (y_4/1000 + y_c))
      gl.glVertex2f((x_1 /1000  + x_c),( y_1/1000 + y_c))
      gl.glVertex2f((x_5 /1000+ x_c), (y_5/1000 + y_c))
      gl.glVertex2f((x_2 /1000  + x_c),( y_2/1000 + y_c))
      gl.glVertex2f((x_6 /1000+ x_c), (y_6/1000 + y_c))
      gl.glVertex2f((x_3 /1000 + x_c),( y_3/1000 + y_c))
      gl.glVertex2f((x_7/1000 + x_c), (y_7/1000 + y_c))

      gl.glEnd()

  def drawCircle(radius, x_c, y_c,string):
      d = 1 - radius
      x = 0
      y = radius
      if(string=="Full"):
        DrawCirclepoints(radius,x, y, x_c, y_c)
      else:
        DrawCirclepointsHalf(radius,x, y, x_c, y_c)
      while x < y:
          x+=1
          if d < 0:
              d = d + 2 * x + 3
          else:
              d = d + 2 * x - 2 * y + 5
              y -= 1
          if(string=="Full"):
            DrawCirclepoints(radius,x, y, x_c, y_c)
          else:
            DrawCirclepointsHalf(radius,x, y, x_c, y_c)


  gl.glClear(gl.GL_COLOR_BUFFER_BIT)

  gl.glColor3f(1, 1, 1)
  gl.glPointSize(10) 
  gl.glBegin(gl.GL_LINES)
  gl.glVertex2f(1,0)
  gl.glVertex2f(-1,0)
  gl.glEnd()

  gl.glColor3f(1,1,1)
  gl.glPointSize(2) 
  gl.glBegin(gl.GL_POINTS)
  for i in range(0,50):
      x = random.randint(-100,100)
      for j in range(0,100):
          y = random.randint(0, 100)
      gl.glVertex2f(x/100, y/100)
  gl.glEnd()

  gl.glColor3f(1,1,1)
  drawCircle(130,0.65,0.75,"Full")

  gl.glPointSize(5)
  gl.glColor3f(134/255, 133/255, 131/255)
  drawCircle(70,-0.65,0.75,"Half")
  drawCircle(100,-0.53,0.75,"Half")
  drawCircle(70,-0.72,0.75,"Half")
  drawCircle(70,0.72,0.60,"Half")
  drawCircle(100,0.60,0.60,"Half")
  drawCircle(70,0.81,0.60,"Half")
  drawCircle(70,0.50,0.60,"Half")

Mode=input()
Mode=Mode.lower()
if(Mode=="day"):day()
else: night()
img_buf = gl.glReadPixelsub(0, 0, WIDTH, HEIGHT, gl.GL_RGB, gl.GL_UNSIGNED_BYTE)
img = np.frombuffer(img_buf,np.uint8).reshape(HEIGHT, WIDTH, 3)[::-1]
display(Image.fromarray(img,'RGB'))